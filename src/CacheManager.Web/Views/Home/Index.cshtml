@{
    ViewData["Title"] = "Home";
}
@section Css
    {
    <link href="~/lib/bootstrap-treeview-1.2.0/bootstrap-treeview.min.css" rel="stylesheet" type="text/css" />
}
<div id="content">
    <br />
    <div class="row">
        <div class="col-sm-4">
            <!-- <form> -->
            <div class="form-group">
                <label for="input-search" class="sr-only">Search Tree:</label>
                <input type="text" class="form-control" id="input-search" placeholder="search the tree node ..." value="">
            </div>
            <!-- </form> -->
            <div id="treeview-searchable" class=""></div>
        </div>
        <div class="search col-sm-8">
            <div class="row">
                <div class="col-sm-8">
                    <div class="input-group">
                        <input type="text" ref="key" placeholder="input key ..." v-model="inputKey" class="form-control input-search-key" />
                        <a class="glyphicon glyphicon-remove btn form-control-feedback"
                           style="pointer-events:auto;color:#cacaca;position:absolute;right:54px;" v-on:click="clearKey"></a>
                        <span class="input-group-btn">
                            <button class="btn btn-primary" v-on:click="research" type="button">Search</button>
                        </span>
                    </div>
                </div>
                <div class="col-sm-2">
                    <span class="checkbox">
                        <label>
                            <input v-model="ignoreTTL" type="checkbox">Ignore TTL
                        </label>
                    </span>
                </div>
                <div class="col-sm-2">
                    <span class="checkbox">
                        <label>
                            <input v-model="ignoreNull" type="checkbox">Ignore Null
                        </label>
                    </span>
                </div>
            </div>
            <div v-if="appConn != ''" style="padding:10px 0px 0px 0px">
                Connection: {{appConn}}
            </div>

            <div style="margin-top:15px;">
                <div class="row" style="margin-bottom:15px;">
                    <div class="col-sm-3">
                        <select class="form-control" v-model="pageSize">
                            <option value="20">20</option>
                            <option value="50">50</option>
                            <option value="100">100</option>
                            <option value="200">200</option>
                            <option value="500">500</option>
                            <option value="1000">1000</option>
                            <option value="2000">2000</option>
                            <option value="5000">5000</option>
                        </select>
                    </div>
                    <div class="col-sm-9" style="text-align:right;line-height:32px;">
                        <a href="javascript:;" class="btn btn-danger" v-on:click="clearAll()">Remove All</a>
                    </div>
                </div>
                
                <div v-if="noData" class="text-center">Can't find any data !</div>
                <table v-if="!noData" class="table table-striped table-bordered table-hover">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Key</th>
                            <th>Type</th>
                            <th>Value</th>
                            <th>TTL</th>
                            <th>Manage</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="item in items">
                            <td>{{item.index}}</td>
                            <td>{{item.key}}</td>
                            <td>{{item.type}}</td>
                            <td>{{item.value}}</td>
                            <td>{{item.expire}}</td>
                            <td>
                                <a href="javascript:;" class="btn btn-primary" v-on:click="viewMore(item)">Details</a>
                                <a href="javascript:;" class="btn btn-danger" v-on:click="clearCache(item)">Remove</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <div class="text-center" v-if="!noData">
                <ul class="pagination">
                    <li v-on:click="goToPrev"><a href="javascript:;">&lt;</a></li>
                    <li v-for="i in pages" v-bind:class="{active:i==pageIndex}"><a href="javascript:;" v-on:click="goToPage(i)">{{i}}</a></li>
                    <li v-on:click="goToNext"><a href="javascript:;">&gt;</a></li>
                    <li style="line-height: 32px;padding-left: 10px;">{{query}}</li>
                </ul>
            </div>

        </div>
    </div>

    <div class="modal" tabindex="-1" v-bind:style="{display:layerShowStatus?'block':''}">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" aria-label="Close" v-on:click="changeLayerStatus">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Key Value Details</h4>
                </div>
                <div class="modal-body">
                    <div class="form-horizontal">
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Key</label>
                            <div class="col-sm-10">
                                <p class="form-control-static">{{viewKey}}</p>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Value</label>
                            <div class="col-sm-10">
                                <textarea rows="5" class="form-control" width="100%" v-model="initValue"></textarea>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label"></label>
                            <div class="col-sm-3">
                                <select class="form-control" v-model="initType">
                                    <option value="0">None</option>
                                    <option value="1">String</option>
                                    <option value="2">List</option>
                                    <option value="3">Set</option>
                                    <option value="4">SortedSet</option>
                                    <option value="5">Hash</option>
                                </select>
                            </div>
                            <div class="col-sm-4">
                                <div class="input-group">
                                    <span class="input-group-addon">
                                        <input type="checkbox" v-model="resetTTL" />
                                    </span>
                                    <input type="text" placeholder="TTL" class="form-control" v-model="initTTL" />
                                    <span class="input-group-addon">s</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" v-on:click="changeLayerStatus">Close</button>
                    <button type="button" class="btn btn-primary" v-on:click="save">Save changes</button>
                </div>
            </div>
        </div>
    </div>

</div>


@section Scripts
    {
    <div id="mask-layer" style="background:#cacaca;opacity:.5;position:fixed;width:100%;height:100%;z-index:1000;top:0;display:none;"></div>
    <div id="mask-content" style="background:white;position:fixed;margin:0 auto;z-index:1001;text-align:center;width:300px;height:75px;line-height:75px;top:30%;left:45%;display:none;">
        <span></span>
    </div>
    <script src="~/lib/bootstrap-treeview-1.2.0/bootstrap-treeview.min.js"></script>
    <script type="text/javascript">
        var mask_layer = $("#mask-layer");
        var mask_content = $("#mask-content");
        var mask_content_span = mask_content.find("span");

        var vm =new Vue({
            el: "#content",
            data: {
                inputKey: "",
                appId: 0,
                appConn:"",
                items: [],
                pageSize: 200,
                pageIndex: 1,
                showPageNumber:9,
                pages: [],
                maxPage:1,
                noData: true,
                layerShowStatus: false,
                ignoreTTL: true,
                ignoreNull: true,
                query:"",
                //properties for edit
                viewKey: "",
                initValue: "",
                initTTL: "",
                initType: 0,
                resetTTL: false
            },
            watch: {
                ignoreType(oldValue, newValue) {
                    this.search();
                },
                ignoreNull(oldValue, newValue) {
                    this.search();
                },
                pageSize(oldValue, newValue) {
                    this.pageIndex = 1;
                    this.search();
                }
            },
            methods: {
                clearKey: function () {
                    this.inputKey = "";
                    this.$refs.key.focus();
                },
                research: function () {
                    this.pageIndex = 1;
                    this.search();
                },
                showMsg: function (msg) {
                    mask_layer.show();
                    mask_content.show();
                    mask_content_span.html(msg);
                },
                hideMsg: function () {
                    mask_layer.hide();
                    mask_content.hide();
                },
                search: function () {
                    var self = this;
                    self.noData = false;
                    self.showMsg("Search hardly...");
                    $.get("@Url.Action("Search")", {
                        "key": self.inputKey,
                        "appId": self.appId,
                        "pageSize": self.pageSize,
                        "pageIndex": self.pageIndex,
                        "ignoreTTL": self.ignoreTTL,
                        "ignoreNull": self.ignoreNull
                    }, function (result) {
                        console.log("search querey succeed!");
                        if (result.count > 0) {
                            self.items = result.data;
                            self.initPages(result.count);
                            self.query = "Total Size:" + result.count + "  Pages:" + self.maxPage;
                        }else {
                            self.noData = true;
                            self.items = [];
                            self.initPages(0);
                            self.query = "No Valid Data!";
                        }
                        self.hideMsg();
                     }).error(function () {
                         self.noData = true;
                         self.items = [];
                         self.initPages(0);
                         console.log("网络或服务器错误");
                         self.query = "Server Error or Network Error";
                         self.hideMsg();
                    });
                },
                goToPage: function (i)
                {
                    this.pageIndex = i;
                    vm.search();
                },
                goToPrev: function () {
                    if (this.pageIndex == 1) { return; }
                    this.pageIndex--;
                    vm.search();
                },
                goToNext: function () {
                    if (this.maxPage == this.pageIndex)
                    {
                        return;
                    }
                    this.pageIndex++;
                    vm.search();

                },initPages(count)
                {
                    var maxPage = Math.floor(count / this.pageSize);
                    if (count % this.pageSize > 0) {
                        maxPage += 1;
                    }
                    this.maxPage = maxPage;

                    var array = [];
                    var prev = this.pageIndex - 4;
                    var prevNumber = 1 - prev;

                    var from = 1;

                    if (prev < 1) {
                        from = 1;
                    } else {
                        from = prev;
                    }

                    var to = this.pageIndex + 4;
                    if (prevNumber > 0) {
                        to += prevNumber;
                    }

                    var toNumber = to - maxPage;
                    if (toNumber > 0) {
                        from = from - toNumber;
                        if (from < 1) {
                            from = 1;
                        }
                    }
                    if (to > maxPage)
                    {
                        to = maxPage;
                    }

                    for (var i = from; i <= to; i++)
                    {
                        array.push(i);
                    }
                    this.pages = array;
                },
                clearCache: function (item) {
                    console.log(item);
                    if (!window.confirm("Are you sure to clear this cache?\nBefore you clear，please back up it yourself")) {
                        return;
                    }
                    $.post("@Url.Action("ClearCache")", { appId: vm.appId, key: item.key }, function (result) {
                        if (!result.ok) {
                            alert(result.msg);
                            return;
                        } else {
                            item.type = "None";
                            item.value = "";
                        }
                    });
                },
                clearAll: function () {
                    if (!window.confirm("Are you sure to clear all the cache?")) {
                        return;
                    }
                    this.showMsg("Removing all the keys ...");
                    var self = this;
                    var keyArray = [];
                    for (let i = 0; i < this.items.length; i++) {
                        keyArray.push(this.items[i].key);
                    }
                    var keys = JSON.stringify(keyArray);
   
                    $.post("@Url.Action("ClearAll")", { appId: vm.appId, "keys": keys }, function (result) {
                        if (!result.ok) {
                            self.hideMsg();
                            return;
                        } else {
                            self.search();
                        }
                    }).error(function () {
                        self.hideMsg();
                    });
                }, changeLayerStatus: function () {
                    this.layerShowStatus = !this.layerShowStatus;
                },
                viewMore: function (item) {
                    var vm = this;
                    var key = item.key;
                    $.get("@Url.Action("more")", { "key": key, appId:vm.appId }, function (result) {
                        if (result.ok) {
                            var data = result.data;
                            vm.viewKey = data.key;
                            vm.initTTL = data.expire;
                            vm.initValue = data.value;
                            vm.resetTTL = false;
                            vm.initType = data.type;
                            vm.changeLayerStatus();
                        }
                    })
                }, save: function () {
                    var model = { appId: this.appId, key: this.viewKey, type: this.initType, value: this.initValue };
                    if (this.resetTTL) {
                        model.timeToLive = this.initTTL;
                    } else {
                        model.timeToLive = 0;
                    }
                    var vm = this;
                    $.post("@Url.Action("Save")", model, function (result) {
                        console.log("save result:",result);
                        if (result.ok == 1) {
                            vm.changeLayerStatus();
                            vm.search();
                        } else if (result.msg != "") {
                            alert(result.msg);
                        } else {
                            alert("保存失败");
                        }
                    });

                }
            }
        });


        (function ($) {
            var apps = null;
            var appIds = null;
            function initApps(datas)
            {
                apps = [];
                appIds = [];
                $.each(datas, function (index, app) {
                    console.log(app);
                    apps.push({
                        text: app.name,
                        nodes: [],
                        id: app.id,
                        type: 'app',
                        conn: app.connectionString
                    });
                    appIds.push(app.id);
                });
            }

            function initNodes(nodes)
            {
                $.each(apps, function (index, app) {
                    $.each(nodes, function (index, node) {

                        if (node.appId == app.id)
                        {
                            console.log("node", node);
                            console.log("app", app);
                            app.nodes.push({
                                text: node.name,
                                id: node.id,
                                type: 'node',
                                appId: node.appId,
                                appConn: app.conn
                            });
                        }
                    });
                });
            }

            var $searchableTree = null;
            $.get("@Url.Action("Search","App")", function (datas) {
                initApps(datas);
                $.post("@Url.Action("All","Key")", { "ids": appIds.join(',') }, function (nodes) {
                    initNodes(nodes);
                    initTreeView(apps);
                }).error(function () {
                    initTreeView(apps);
                 });
            }).error(function () {
                 initTreeView([]);
             });

            function initTreeView(apps)
            {
                $searchableTree = $('#treeview-searchable').treeview({
                    data: apps,
                    onNodeSelected: function (event, data)
                    {
                        console.log(data);
                        if (data.type == "node")
                        {
                            vm.inputKey = data.text;
                            vm.appId = data.appId;
                            vm.appConn = data.appConn;
                            vm.search();
                        }
                    }
                });
            }

            var search = function (e) {
                var pattern = $('#input-search').val();
                var options = {
                    ignoreCase: $('#chk-ignore-case').is(':checked'),
                    exactMatch: $('#chk-exact-match').is(':checked'),
                    revealResults: $('#chk-reveal-results').is(':checked')
                };
                $searchableTree.treeview('search', [pattern, options]);
            }

            $('#input-search').on('keyup', search);
        }(jQuery));



    </script>
}
