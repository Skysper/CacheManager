@{
    ViewData["Title"] = "首页";
}
@section Css
    {
    <link href="~/lib/bootstrap-treeview-1.2.0/bootstrap-treeview.min.css" rel="stylesheet" type="text/css" />
}
<div id="content">
    <br />
    <div class="row">
        <div class="col-sm-4">
            <!-- <form> -->
            <div class="form-group">
                <label for="input-search" class="sr-only">Search Tree:</label>
                <input type="text" class="form-control" id="input-search" placeholder="查找树节点..." value="">
            </div>
            <!-- </form> -->
            <div id="treeview-searchable" class=""></div>
        </div>
        <div class="search col-sm-8">
            <div class="row">
                <div class="col-sm-10 col-xs-7">
                    <input type="text" v-model="inputKey" class="form-control input-search-key" />
                </div>
                <div class="col-sm-2 col-xs-5">
                    <input type="button" href="javascript:;" class="btn btn-primary" value="查找" v-on:click="research" />
                </div>
            </div>

            <div class="row" style="margin-top:15px;">
                <div v-if="noData" class="text-center">未能获取到任何结果</div>
                <table v-if="!noData" class="table table-striped table-bordered table-hover">
                    <thead>
                        <tr>
                            <th></th>
                            <th>键</th>
                            <th>类型</th>
                            <th>值</th>
                            <th>过期时间</th>
                            <th>操作</th>
                        </tr>
                    </thead>
                    <tbody>
                        <tr v-for="item in items">
                            <td>{{item.index}}</td>
                            <td>{{item.key}}</td>
                            <td>{{item.type}}</td>
                            <td>{{item.value}}</td>
                            <td>{{item.expire}}</td>
                            <td>
                                <a href="javascript:;" class="btn btn-primary" v-on:click="viewCache(item)">详细</a>
                                <a href="javascript:;" class="btn btn-primary" v-on:click="clearCache(item)">清除缓存</a>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <div class="text-center" v-if="!noData">
                <ul class="pagination">
                    <li v-on:click="goToPrev"><a href="javascript:;">&lt;</a></li>
                    <li v-for="i in pages" v-bind:class="{active:i==pageIndex}"><a href="javascript:;" v-on:click="goToPage(i)">{{i}}</a></li>
                    <li v-on:click="goToNext"><a href="javascript:;">&gt;</a></li>
                </ul>
            </div>

        </div>
    </div>
</div>


@section Scripts
    {
    <script src="~/lib/bootstrap-treeview-1.2.0/bootstrap-treeview.min.js"></script>
    <script type="text/javascript">
        var vm =new Vue({
            el: "#content",
            data: {
                inputKey: "",
                appId:0,
                items: [],
                pageSize: 50,
                pageIndex: 1,
                maxPage:0,
                showPageNumber:9,
                pages:[],
                noData: true,
            },
            methods: {
                research: function () {
                    this.pageIndex = 1;
                    this.search();
                },
                search: function () {
                    var self = this;
                    self.noData = false;
                    $.get("@Url.Action("Search")", { "key": self.inputKey, "appId": self.appId, "pageSize": self.pageSize, "pageIndex": self.pageIndex }, function (result) {
                        console.log("search querey succeed!");
                        if (result.count > 0) {
                            self.items = result.data;
                            self.initPages(result.count);
                        }else {
                            self.noData = true;
                            self.items = [];
                            self.initPages(0);
                        }
                     }).error(function () {
                         self.noData = true;
                         self.items = [];
                         self.initPages(0);
                         console.log("网络或服务器错误");
                    });
                },
                goToPage: function (i)
                {
                    this.pageIndex = i;
                    vm.search();
                },
                goToPrev: function () {
                    if (this.pageIndex == 1) { return; }
                    this.pageIndex--;
                    vm.search();
                },
                goToNext: function () {
                    if (this.maxPage == this.pageIndex)
                    {
                        return;
                    }
                    this.pageIndex++;
                    vm.search();

                },initPages(count)
                {
                    var maxPage = count / this.pageSize;
                    if (count % this.pageSize > 0) {
                        maxPage += 1;
                    }
                    this.maxPage = maxPage;

                    var array = [];
                    var prev = this.pageIndex - 4;
                    var prevNumber = 1 - prev;

                    var from = 1;

                    if (prev < 1) {
                        from = 1;
                    } else {
                        from = prev;
                    }

                    var to = this.pageIndex + 4;
                    if (prevNumber > 0) {
                        to += prevNumber;
                    }

                    var toNumber = to - maxPage;
                    if (toNumber > 0) {
                        from = from - toNumber;
                        if (from < 1) {
                            from = 1;
                        }
                    }
                    if (to > maxPage)
                    { 
                        to = maxPage;
                    }

                    for (var i = from; i <= to; i++)
                    {
                        array.push(i);
                    }
                    this.pages = array;
                },viewCache: function (item) {

                }, clearCache: function (item) {
                    $.post("@Url.Action("ClearCache")", { appId: vm.appId, key: item.key }, function (result) {
                        if (!result.ok) {
                            alert(result.msg);
                            return;
                        } else {
                            vm.search();
                        }
                    });
                }
            }
        });


        (function ($) {
            var apps = null;
            var appIds = null;
            function initApps(datas)
            {
                apps = [];
                appIds = [];
                $.each(datas, function (index, app) {
                    apps.push({
                        text: app.name,
                        nodes: [],
                        id: app.id,
                        type: 'app'
                    });
                    appIds.push(app.id);
                });
            }

            function initNodes(nodes)
            {
                $.each(apps, function (index, app) {
                    $.each(nodes, function (index, node) {
                        if (node.appId == app.id)
                        {
                            app.nodes.push({
                                text: node.name,
                                id: node.id,
                                type: 'node',
                                appId: node.appId
                            });
                        }
                    });
                });
            }

            var $searchableTree = null;
            $.get("@Url.Action("All","AppInfo")", function (datas) {
                initApps(datas);
                $.post("@Url.Action("All","Key")", { "ids": appIds.join(',') }, function (nodes) {
                    initNodes(nodes);
                    initTreeView(apps);
                }).error(function () {
                    initTreeView(apps);
                 });
            }).error(function () {
                 initTreeView([]);
             });

            function initTreeView(apps)
            {
                $searchableTree = $('#treeview-searchable').treeview({
                    data: apps,
                    onNodeSelected: function (event, data)
                    {
                        console.log(data);
                        if (data.type == "node")
                        {
                            vm.inputKey = data.text;
                            vm.appId = data.appId;
                            vm.search();
                        }
                    }
                });
            }

            var search = function (e) {
                var pattern = $('#input-search').val();
                var options = {
                    ignoreCase: $('#chk-ignore-case').is(':checked'),
                    exactMatch: $('#chk-exact-match').is(':checked'),
                    revealResults: $('#chk-reveal-results').is(':checked')
                };
                $searchableTree.treeview('search', [pattern, options]);
            }

            $('#input-search').on('keyup', search);
        }(jQuery));



    </script>
}
